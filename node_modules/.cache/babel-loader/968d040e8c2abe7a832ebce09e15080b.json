{"ast":null,"code":"import _objectSpread from \"/Users/declanbradley/Documents/GitHub/congress-finance/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * This example shows how to load a GEXF graph file (using the dedicated\n * graphology parser), and display it with some basic map features: Zoom in and\n * out buttons, reset zoom button, and a slider to increase or decrease the\n * quantity of labels displayed on screen.\n */\n\nimport Sigma from \"sigma\";\nimport Graph from \"graphology\";\nimport { parse } from \"graphology-gexf/browser\";\n// Load external GEXF file:\nfetch(\"./congress2022v9.gexf\").then(function (res) {\n  return res.text();\n}).then(function (gexf) {\n  // Parse GEXF string:\n  var graph = parse(Graph, gexf);\n\n  // Retrieve some useful DOM elements:\n  var container = document.getElementById(\"sigma-container\");\n  var zoomInBtn = document.getElementById(\"zoom-in\");\n  var zoomOutBtn = document.getElementById(\"zoom-out\");\n  var zoomResetBtn = document.getElementById(\"zoom-reset\");\n  var labelsThresholdRange = document.getElementById(\"labels-threshold\");\n  var searchInput = document.getElementById(\"search-input\");\n  var searchSuggestions = document.getElementById(\"suggestions\");\n\n  // Instanciate sigma:\n  var renderer = new Sigma(graph, container, {\n    minCameraRatio: 0.01,\n    maxCameraRatio: 3,\n    allowInvalidContainer: true,\n    renderEdgeLabels: true\n  });\n  var camera = renderer.getCamera();\n\n  // Bind zoom manipulation buttons\n  zoomInBtn.addEventListener(\"click\", function () {\n    camera.animatedZoom({\n      duration: 600\n    });\n  });\n  zoomOutBtn.addEventListener(\"click\", function () {\n    camera.animatedUnzoom({\n      duration: 600\n    });\n  });\n  zoomResetBtn.addEventListener(\"click\", function () {\n    camera.animatedReset({\n      duration: 600\n    });\n  });\n  renderer.setSetting(\"labelRenderedSizeThreshold\", +1);\n\n  // Type and declare internal state:\n\n  var state = {\n    searchQuery: \"\"\n  };\n\n  // Feed the datalist autocomplete values:\n  searchSuggestions.innerHTML = graph.nodes().map(function (node) {\n    return \"<option value=\\\"\".concat(graph.getNodeAttribute(node, \"label\"), \"\\\"></option>\");\n  }).join(\"\\n\");\n\n  // Actions:\n  function setSearchQuery(query) {\n    state.searchQuery = query;\n    if (searchInput.value !== query) searchInput.value = query;\n    if (query) {\n      var lcQuery = query.toLowerCase();\n      var suggestions = graph.nodes().map(function (n) {\n        return {\n          id: n,\n          label: graph.getNodeAttribute(n, \"label\")\n        };\n      }).filter(function (_ref) {\n        var label = _ref.label;\n        return label.toLowerCase().includes(lcQuery);\n      });\n\n      // If we have a single perfect match, them we remove the suggestions, and\n      // we consider the user has selected a node through the datalist\n      // autocomplete:\n      if (suggestions.length === 1 && suggestions[0].label === query) {\n        state.selectedNode = suggestions[0].id;\n        setHoveredNode(suggestions[0].id);\n        state.suggestions = undefined;\n        clickMode = true;\n        clickedNode = suggestions[0].id;\n\n        // Move the camera to center it on the selected node:\n        var nodePosition = renderer.getNodeDisplayData(state.selectedNode);\n        renderer.getCamera().animate(nodePosition, {\n          duration: 500\n        });\n      }\n      // Else, we display the suggestions list:\n      else {\n        state.selectedNode = undefined;\n        state.suggestions = new Set(suggestions.map(function (_ref2) {\n          var id = _ref2.id;\n          return id;\n        }));\n      }\n    }\n    // If the query is empty, then we reset the selectedNode / suggestions state:\n    else {\n      state.selectedNode = undefined;\n      state.suggestions = undefined;\n    }\n\n    // Refresh rendering:\n    renderer.refresh();\n  }\n  function setHoveredNode(node) {\n    if (node) {\n      state.hoveredNode = node;\n      state.hoveredNeighbors = new Set(graph.neighbors(node));\n    } else {\n      state.hoveredNode = undefined;\n      state.hoveredNeighbors = undefined;\n    }\n\n    // Refresh rendering:\n    renderer.refresh();\n  }\n\n  // Bind search input interactions:\n  searchInput.addEventListener(\"input\", function () {\n    setSearchQuery(searchInput.value || \"\");\n  });\n  searchInput.addEventListener(\"blur\", function () {\n    setSearchQuery(\"\");\n  });\n  var clickedNode = undefined;\n  var clickMode = false;\n  // Bind graph interactions:\n  renderer.on(\"clickNode\", function (_ref3) {\n    var node = _ref3.node;\n    if (clickedNode === node) {\n      clickedNode = undefined;\n      setHoveredNode(undefined);\n      clickMode = false;\n    } else {\n      clickedNode = node;\n      clickMode = true;\n      setHoveredNode(node);\n    }\n  });\n  renderer.on(\"enterNode\", function (_ref4) {\n    var node = _ref4.node;\n    if (clickMode === false) {\n      setHoveredNode(node);\n    }\n  });\n  renderer.on(\"leaveNode\", function (_ref5) {\n    var node = _ref5.node;\n    if (clickMode === false) {\n      if (clickedNode !== node) {\n        setHoveredNode(undefined);\n      }\n    }\n  });\n  renderer.on(\"doubleClickNode\", function (_ref6) {\n    var node = _ref6.node;\n    window.open(\"https://www.opensecrets.org/search?q=\" + node);\n  });\n  renderer.setSetting(\"nodeReducer\", function (node, data) {\n    var res = _objectSpread({}, data);\n    if (state.hoveredNeighbors && !state.hoveredNeighbors.has(node) && state.hoveredNode !== node) {\n      res.label = \"\";\n      res.color = \"#f6f6f6\";\n    }\n    if (state.selectedNode === node) {\n      res.highlighted = true;\n    } else if (state.suggestions && !state.suggestions.has(node)) {\n      res.label = \"\";\n      res.color = \"#f6f6f6\";\n    }\n    if (state.suggestions && state.suggestions.has(node)) {\n      res.highlighted = true;\n      res.label = graph.getNodeAttribute(node, \"label\");\n      res.color = graph.getNodeAttribute(node, \"color\");\n    }\n    return res;\n  });\n\n  // Render edges accordingly to the internal state:\n  // 1. If a node is hovered, the edge is hidden if it is not connected to the\n  //    node\n  // 2. If there is a query, the edge is only visible if it connects two\n  //    suggestions\n  renderer.setSetting(\"edgeReducer\", function (edge, data) {\n    var res = _objectSpread({}, data);\n    if (state.hoveredNode && !graph.hasExtremity(edge, state.hoveredNode)) {\n      res.hidden = true;\n    }\n    if (state.suggestions && (!state.suggestions.has(graph.source(edge)) || !state.suggestions.has(graph.target(edge)))) {\n      res.hidden = true;\n    }\n    return res;\n  });\n});","map":{"version":3,"names":["Sigma","Graph","parse","fetch","then","res","text","gexf","graph","container","document","getElementById","zoomInBtn","zoomOutBtn","zoomResetBtn","labelsThresholdRange","searchInput","searchSuggestions","renderer","minCameraRatio","maxCameraRatio","allowInvalidContainer","renderEdgeLabels","camera","getCamera","addEventListener","animatedZoom","duration","animatedUnzoom","animatedReset","setSetting","state","searchQuery","innerHTML","nodes","map","node","getNodeAttribute","join","setSearchQuery","query","value","lcQuery","toLowerCase","suggestions","n","id","label","filter","includes","length","selectedNode","setHoveredNode","undefined","clickMode","clickedNode","nodePosition","getNodeDisplayData","animate","Set","refresh","hoveredNode","hoveredNeighbors","neighbors","on","window","open","data","has","color","highlighted","edge","hasExtremity","hidden","source","target"],"sources":["/Users/declanbradley/Documents/GitHub/congress-finance/src/index.ts"],"sourcesContent":["/**\n * This example shows how to load a GEXF graph file (using the dedicated\n * graphology parser), and display it with some basic map features: Zoom in and\n * out buttons, reset zoom button, and a slider to increase or decrease the\n * quantity of labels displayed on screen.\n */\n\nimport Sigma from \"sigma\";\nimport Graph from \"graphology\";\nimport { parse } from \"graphology-gexf/browser\";\nimport { Coordinates, EdgeDisplayData, NodeDisplayData } from \"sigma/types\";\n\n// Load external GEXF file:\nfetch(\"./congress2022v9.gexf\")\n  .then((res) => res.text())\n  .then((gexf) => {\n    // Parse GEXF string:\n    const graph = parse(Graph, gexf);\n\n    // Retrieve some useful DOM elements:\n    const container = document.getElementById(\"sigma-container\") as HTMLElement;\n    const zoomInBtn = document.getElementById(\"zoom-in\") as HTMLButtonElement;\n    const zoomOutBtn = document.getElementById(\"zoom-out\") as HTMLButtonElement;\n    const zoomResetBtn = document.getElementById(\n      \"zoom-reset\"\n    ) as HTMLButtonElement;\n    const labelsThresholdRange = document.getElementById(\n      \"labels-threshold\"\n    ) as HTMLInputElement;\n    const searchInput = document.getElementById(\n      \"search-input\"\n    ) as HTMLInputElement;\n    const searchSuggestions = document.getElementById(\n      \"suggestions\"\n    ) as HTMLDataListElement;\n\n    // Instanciate sigma:\n    const renderer = new Sigma(graph, container, {\n      minCameraRatio: 0.01,\n      maxCameraRatio: 3,\n      allowInvalidContainer: true,\n      renderEdgeLabels: true\n    });\n    const camera = renderer.getCamera();\n\n    // Bind zoom manipulation buttons\n    zoomInBtn.addEventListener(\"click\", () => {\n      camera.animatedZoom({ duration: 600 });\n    });\n    zoomOutBtn.addEventListener(\"click\", () => {\n      camera.animatedUnzoom({ duration: 600 });\n    });\n    zoomResetBtn.addEventListener(\"click\", () => {\n      camera.animatedReset({ duration: 600 });\n    });\n    renderer.setSetting(\"labelRenderedSizeThreshold\", +1);\n\n    // Type and declare internal state:\n    interface State {\n      hoveredNode?: string;\n      searchQuery: string;\n\n      // State derived from query:\n      selectedNode?: string;\n      suggestions?: Set<string>;\n\n      // State derived from hovered node:\n      hoveredNeighbors?: Set<string>;\n    }\n    const state: State = { searchQuery: \"\" };\n\n    // Feed the datalist autocomplete values:\n    searchSuggestions.innerHTML = graph\n      .nodes()\n      .map(\n        (node) =>\n          `<option value=\"${graph.getNodeAttribute(node, \"label\")}\"></option>`\n      )\n      .join(\"\\n\");\n\n    // Actions:\n    function setSearchQuery(query: string) {\n      state.searchQuery = query;\n\n      if (searchInput.value !== query) searchInput.value = query;\n\n      if (query) {\n        const lcQuery = query.toLowerCase();\n        const suggestions = graph\n          .nodes()\n          .map((n) => ({\n            id: n,\n            label: graph.getNodeAttribute(n, \"label\") as string\n          }))\n          .filter(({ label }) => label.toLowerCase().includes(lcQuery));\n\n        // If we have a single perfect match, them we remove the suggestions, and\n        // we consider the user has selected a node through the datalist\n        // autocomplete:\n        if (suggestions.length === 1 && suggestions[0].label === query) {\n          state.selectedNode = suggestions[0].id;\n          setHoveredNode(suggestions[0].id)\n          state.suggestions = undefined;\n          clickMode = true\n          clickedNode = suggestions[0].id\n\n          // Move the camera to center it on the selected node:\n          const nodePosition = renderer.getNodeDisplayData(\n            state.selectedNode\n          ) as Coordinates;\n          renderer.getCamera().animate(nodePosition, {\n            duration: 500\n          });\n        }\n        // Else, we display the suggestions list:\n        else {\n          state.selectedNode = undefined;\n          state.suggestions = new Set(suggestions.map(({ id }) => id));\n        }\n      }\n      // If the query is empty, then we reset the selectedNode / suggestions state:\n      else {\n        state.selectedNode = undefined;\n        state.suggestions = undefined;\n      }\n\n      // Refresh rendering:\n      renderer.refresh();\n    }\n\n    function setHoveredNode(node?: string) {\n      if (node) {\n        state.hoveredNode = node;\n        state.hoveredNeighbors = new Set(graph.neighbors(node));\n      } else {\n        state.hoveredNode = undefined;\n        state.hoveredNeighbors = undefined;\n      }\n\n      // Refresh rendering:\n      renderer.refresh();\n    }\n\n    // Bind search input interactions:\n    searchInput.addEventListener(\"input\", () => {\n      setSearchQuery(searchInput.value || \"\");\n    });\n    searchInput.addEventListener(\"blur\", () => {\n      setSearchQuery(\"\");\n    });\n\n    var clickedNode = undefined;\n    var clickMode = false;\n    // Bind graph interactions:\n    renderer.on(\"clickNode\", ({ node }) => {\n      if (clickedNode === node) {\n        clickedNode = undefined;\n        setHoveredNode(undefined);\n        clickMode = false;\n      } else {\n        clickedNode = node;\n        clickMode = true;\n        setHoveredNode(node);\n      }\n    });\n    renderer.on(\"enterNode\", ({ node }) => {\n      if (clickMode === false) {\n        setHoveredNode(node);\n      }\n    });\n    renderer.on(\"leaveNode\", ({ node }) => {\n      if (clickMode === false) {\n        if (clickedNode !== node) {\n          setHoveredNode(undefined);\n        }\n      }\n    });\n    renderer.on(\"doubleClickNode\", ({ node }) => {\n      window.open(\"https://www.opensecrets.org/search?q=\" + node);\n    });\n\n    renderer.setSetting(\"nodeReducer\", (node, data) => {\n      const res: Partial<NodeDisplayData> = { ...data };\n\n      if (\n        state.hoveredNeighbors &&\n        !state.hoveredNeighbors.has(node) &&\n        state.hoveredNode !== node\n      ) {\n        res.label = \"\";\n        res.color = \"#f6f6f6\";\n      }\n\n      if (state.selectedNode === node) {\n        res.highlighted = true;\n      } else if (state.suggestions && !state.suggestions.has(node)) {\n        res.label = \"\";\n        res.color = \"#f6f6f6\";\n      }\n\n      if (state.suggestions && state.suggestions.has(node)) {\n        res.highlighted = true;\n        res.label = graph.getNodeAttribute(node, \"label\")\n        res.color = graph.getNodeAttribute(node, \"color\")\n      }\n\n      return res;\n    });\n\n    // Render edges accordingly to the internal state:\n    // 1. If a node is hovered, the edge is hidden if it is not connected to the\n    //    node\n    // 2. If there is a query, the edge is only visible if it connects two\n    //    suggestions\n    renderer.setSetting(\"edgeReducer\", (edge, data) => {\n      const res: Partial<EdgeDisplayData> = { ...data };\n\n      if (state.hoveredNode && !graph.hasExtremity(edge, state.hoveredNode)) {\n        res.hidden = true;\n      }\n\n      if (\n        state.suggestions &&\n        (!state.suggestions.has(graph.source(edge)) ||\n          !state.suggestions.has(graph.target(edge)))\n      ) {\n        res.hidden = true;\n      }\n\n      return res;\n    });\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}